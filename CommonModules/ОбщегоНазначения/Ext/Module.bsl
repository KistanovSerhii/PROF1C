

#Область ПрограммныйИнтерфейс

// Функция - Получить случайный набор билетов
//
// Параметры:
//  ИмяСправочникаЭкзамен	 - Строка - Имя справочника в котором хранятся билеты.
//  РазделКод				 - Число  - Реквизит "Код", если 0 тогда по одному билету из
//										каждого раздела иначе "КоличествоБилетов"
//										(Если "КоличествоБилетов" = неопределено Тогда столько
//										сколько Групп в справочнике) Раздел - это Группа справочника.
//	КоличествоБилетов 		 - Число  - Если = Неопределено Тогда столько сколько Групп в справочнике.
// 
// Возвращаемое значение:
//  мНаборБилетов - Массив Из Структура:
//	*Ссылка - СправочникСсылка, это ссылка на билет
//
Функция ПолучитьСлучайныйНаборБилетов(ИмяСправочникаЭкзамен, РазделКод, КоличествоБилетов) Экспорт
	
	мНаборБилетов = Новый Массив;
	мРазделСсылка = Новый Массив;
	
	Если РазделКод <> 0 Тогда
		РазделСсылка = Справочники[ИмяСправочникаЭкзамен].НайтиПоКоду(РазделКод);
		Если РазделСсылка = Неопределено ИЛИ РазделСсылка = Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		мРазделСсылка.Добавить(РазделКод);
	Иначе
		ТекстЗапроса 		= ТекстЗапросаПолучитьРазделы();
		ТекстЗапросаРазделы = СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);	

		ЗапросРазделы 		= Новый Запрос;
		ЗапросРазделы.Текст = ТекстЗапросаРазделы;
		РезультатЗапроса 	= ЗапросРазделы.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			мРазделСсылка.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	КолБилетов =  ?(КоличествоБилетов = Неопределено ИЛИ КоличествоБилетов = 0, мРазделСсылка.ВГраница(), КоличествоБилетов);
	
	ИтераторРазделов = 0;
	Пока КолБилетов > ИтераторРазделов Цикл
		
		СправочникГруппа	= мРазделСсылка[ИтераторРазделов];
		СлучайныйБилетКод	= ПолучитьСлучайныйКодГруппы(СправочникГруппа);
		ПараметрыОтбора 	= Новый Структура;
		
		// ПараметрыОтбора.Вставить("Родитель", 	СправочникГруппа);
		ПараметрыОтбора.Вставить("Код", 		СлучайныйБилетКод);
		
		БилетВыборка = Справочники.БилетыПлатформа.Выбрать(СправочникГруппа,, ПараметрыОтбора);
		Если БилетВыборка.Следующий() Тогда
			мНаборБилетов.Добавить(БилетВыборка.Ссылка);
		КонецЕсли;		
		
		ИтераторРазделов = ?(ИтераторРазделов >= мРазделСсылка.ВГраница(), 0,  ИтераторРазделов + 1);
	КонецЦикла;
	
	Возврат мНаборБилетов;
	
КонецФункции
	
// Процедура - Вывести билет на форму
//
// Параметры:
//  ФормаСсылка	 - ФормаСсылка - ссылка на любую форму.
//  БилетСсылка	 - СправочникСсылка - элемент хранит данные билета.
//
Процедура ВывестиБилетНаФорму(ФормаСсылка, БилетСсылка) Экспорт

	

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПолучитьРазделы()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	Билеты.ЭтоГруппа
	|	И НЕ Билеты.ПометкаУдаления";
	
КонецФункции

Функция ПолучитьСлучайныйКодГруппы(СправочникГруппа)
	Возврат 1; // Случайный Код элемента без/с учета уже показанных (рег. элемент.родитель, элемент.код)
КонецФункции

#КонецОбласти