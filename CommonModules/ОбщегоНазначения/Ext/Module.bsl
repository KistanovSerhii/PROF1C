

#Область ПрограммныйИнтерфейс

// Функция - Получить случайный набор билетов
//
// Параметры:
//  ИмяСправочникаЭкзамен	 - Строка - Имя справочника в котором хранятся билеты.
//  РазделКод				 - Число  - Реквизит "Код", если 0 тогда по одному билету из
//										каждого раздела иначе "КоличествоБилетов"
//										(Если "КоличествоБилетов" = неопределено Тогда столько
//										сколько Групп в справочнике) Раздел - это Группа справочника.
//	КоличествоБилетов 		 - Число  - Если = Неопределено Тогда столько сколько Групп в справочнике.
// 
// Возвращаемое значение:
//  мНаборБилетов - Массив Из Структура:
//	*Ссылка - СправочникСсылка, это ссылка на билет
//
Функция ПолучитьСлучайныйНаборБилетов(ИмяСправочникаЭкзамен, РазделКод, КоличествоБилетов = 0) Экспорт
	
	БезПоказанныхРанее	= Константы.СлучайныеБилетыБезПоказанных.Получить();
	мНаборБилетов 		= Новый Массив;
	мРазделСсылка 		= Новый Массив;
	
	Если РазделКод <> 0 Тогда
		РазделСсылка = Справочники[ИмяСправочникаЭкзамен].НайтиПоКоду(РазделКод);
		Если РазделСсылка = Неопределено ИЛИ РазделСсылка = Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		мРазделСсылка.Добавить(РазделСсылка);
	Иначе
		ТекстЗапроса 		= ТекстЗапросаПолучитьРазделы();
		ТекстЗапросаРазделы = СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);	

		ЗапросРазделы 		= Новый Запрос;
		ЗапросРазделы.Текст = ТекстЗапросаРазделы;
		РезультатЗапроса 	= ЗапросРазделы.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			мРазделСсылка.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если мРазделСсылка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КолБилетов =  ?(КоличествоБилетов = Неопределено ИЛИ КоличествоБилетов = 0, мРазделСсылка.Количество(), КоличествоБилетов);
	
	ИтераторРазделов = 0;
	Пока КолБилетов > ИтераторРазделов Цикл
		
		СправочникГруппа	= мРазделСсылка[ИтераторРазделов];
		БилетСсылка 		= Неопределено;
		ПопыткаПолучитьКод	= 0;
		
		Пока БилетСсылка = Неопределено ИЛИ БилетСсылка = Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка() Цикл
			Если ПопыткаПолучитьКод > 5 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			БилетСсылка			= ПолучитьСлучайныйКодБилетаУникальныйВГруппе(СправочникГруппа, мНаборБилетов, ИмяСправочникаЭкзамен);
			БилетЕщеНеПроходил	= ?(БезПоказанныхРанее, ЭтоУникальныйБилетЗаВсеВремяПроверить(БилетСсылка), Истина);
			ПопыткаПолучитьКод	= ?(БилетЕщеНеПроходил ИЛИ БилетЕщеНеПроходил = Неопределено, ПопыткаПолучитьКод + 1, 0);
		КонецЦикла;
		
		мНаборБилетов.Добавить(БилетСсылка);
		
		ИтераторРазделов = ?(ИтераторРазделов >= мРазделСсылка.Количество() И КолБилетов < ИтераторРазделов + 1, 0,  ИтераторРазделов + 1);
	КонецЦикла;
	
	Возврат мНаборБилетов;
	
КонецФункции
	
// Процедура - Вывести билет на форму
//
// Параметры:
//  ФормаСсылка	 - ФормаСсылка - ссылка на любую форму.
//  БилетСсылка	 - СправочникСсылка - элемент хранит данные билета.
//
Процедура ВывестиБилетНаФорму(ФормаСсылка, БилетСсылка) Экспорт

	

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПолучитьРазделы()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	Билеты.ЭтоГруппа
	|	И НЕ Билеты.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
КонецФункции

Функция ТекстЗапросаПолучитьСлучайныйКодБилетаВГруппе()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка 	КАК Ссылка,
	|	Билеты.Код 		КАК Код
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	НЕ Билеты.ЭтоГруппа
	|	И  Билеты.Родитель 	В (&Родитель)
	|	И  НЕ Билеты.Ссылка В (&мНаборБилетов)
	|	И НЕ Билеты.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Билеты.Родитель.Код,
	|	Код";	
	
КонецФункции

Функция ПолучитьСлучайныйКодБилетаУникальныйВГруппе(СправочникГруппа, мНаборБилетов, ИмяСправочникаЭкзамен)

	БилетСсылка 		= Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка();
	ТекстЗапроса		= ТекстЗапросаПолучитьСлучайныйКодБилетаВГруппе();
	ТекстЗапросаБилеты 	= СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);	
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаБилеты;
	
	Запрос.УстановитьПараметр("Родитель", 		СправочникГруппа);
	Запрос.УстановитьПараметр("мНаборБилетов", 	мНаборБилетов);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка 			= РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИтерацияА				= 1;
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	СлучайныйБилетВыборки 	= ГенераторСлучайныхЧисел.СлучайноеЧисло(1, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
	
		Если СлучайныйБилетВыборки = ИтерацияА Тогда
			БилетСсылка = Выборка.Ссылка;
		КонецЕсли;
		
		ИтерацияА = ИтерацияА + 1;
		
	КонецЦикла;
	
	Возврат БилетСсылка;
	
КонецФункции

Функция ЭтоУникальныйБилетЗаВсеВремяПроверить(БилетСсылка)

	Если БилетСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БилетНайден = Ложь;
	ОтборБилет	= Новый Структура;
	
	ОтборБилет.Вставить("Билет", БилетСсылка);
	
	ВыборкаБилет = РегистрыСведений.БилетыПоказанныеРанее.Выбрать(,,ОтборБилет);
	
	Пока ВыборкаБилет.Следующий() Цикл
	
		Если ВыборкаБилет.Билет = БилетСсылка Тогда
			БилетНайден = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат БилетНайден;
	
КонецФункции

#КонецОбласти