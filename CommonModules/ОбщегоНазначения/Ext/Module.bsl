

#Область ПрограммныйИнтерфейс

// Процедура - Инициализирова экзаменационную форму
//
// Параметры:
//  ЭкзаменационнаяФорма - Форма - Обязательно содержит на форме:
//		1. ТЗ "мБилеты" с реквизитом "Ссылка"
//		(составной тип СправочникСсылка, справочники билетов)
//		2. Параметры формы:
//		ИмяСправочника 	- Метаданные.Имя справочника где хранятся билеты (пример: "БилетыПлатформа")
//		РазделКод 		- Ссылка.Код Группы (тема), если 0 или неопределено Тогда все группы справочника
//		КолБилетов 		- Сколько элементов будет выбрано, если неопределено Тогда по одному билету из Группы (темы)
//
Процедура ИнициализироваЭкзаменационнуюФорму(ЭкзаменационнаяФорма) Экспорт
	
	фПараметры 				= ЭкзаменационнаяФорма.Параметры;
	НаборБилетовЭкзамена 	= ОбщегоНазначения.ПолучитьСлучайныйНаборБилетов(фПараметры.ИмяСправочника, фПараметры.РазделКод, фПараметры.КолБилетов);
	
	НаполнитьТаблицуБилетами(ЭкзаменационнаяФорма, НаборБилетовЭкзамена);
	НаполнитьПанельСчетчикБилетов(ЭкзаменационнаяФорма, НаборБилетовЭкзамена);
	
КонецПроцедуры

// Функция - Получить случайный набор билетов
// Будет полученно по одному случайному билету из каждого раздела или
// N/Все билеты переданного раздела (все билеты можно выбрать только если передать код раздела)
//
// Параметры:
//  ИмяСправочникаЭкзамен	 - Строка - Имя справочника в котором хранятся билеты.
//  РазделКод				 - Число  - Реквизит "Код", если 0 тогда по одному билету из
//										каждого раздела иначе "КоличествоБилетов"
//										(Если "КоличествоБилетов" = неопределено Тогда столько
//										сколько Групп в справочнике) Раздел - это Группа справочника.
//	КоличествоБилетов 		 - Число  - Если = Неопределено Тогда столько сколько Групп в справочнике.
// 
// Возвращаемое значение:
//  мНаборБилетов - Массив Из Структура:
//	*Ссылка - СправочникСсылка, это ссылка на билет
//
Функция ПолучитьСлучайныйНаборБилетов(ИмяСправочникаЭкзамен, РазделКод = 0, КоличествоБилетов = 0) Экспорт
	
	БезПоказанныхРанее	= Константы.СлучайныеБезРанееПоказанных.Получить();
	мНаборБилетов 		= Новый Массив;
	мРазделСсылка 		= Новый Массив;
	
	Если РазделКод <> 0 И РазделКод <> Неопределено Тогда
		РазделСсылка = Справочники[ИмяСправочникаЭкзамен].НайтиПоКоду(РазделКод);
		Если РазделСсылка = Неопределено ИЛИ РазделСсылка = Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		мРазделСсылка.Добавить(РазделСсылка);
	Иначе
		ТекстЗапроса 		= ТекстЗапросаПолучитьРазделы();
		ТекстЗапросаРазделы = СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);	

		ЗапросРазделы 		= Новый Запрос;
		ЗапросРазделы.Текст = ТекстЗапросаРазделы;
		РезультатЗапроса 	= ЗапросРазделы.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			мРазделСсылка.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если мРазделСсылка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	КолБилетовВПервомРазделе 		= ?(мРазделСсылка.Количество() > 0, КоличествоБилетовВРазделе(ИмяСправочникаЭкзамен, мРазделСсылка[0]), 0);
	КоличествоБилетовПоУмолчанию	= ?(мРазделСсылка.Количество() < 2, КолБилетовВПервомРазделе, мРазделСсылка.Количество());
	
	КолРазделов 		= мРазделСсылка.Количество();
	КолБилетов 			= ?(КоличествоБилетов = Неопределено ИЛИ КоличествоБилетов = 0, КоличествоБилетовПоУмолчанию, КоличествоБилетов);
	
	ИтераторРазделов 	= 0;
	ИтераторБилетов 	= 0;
	
	Пока КолБилетов > ИтераторБилетов Цикл
		
		СправочникГруппа	= мРазделСсылка[ИтераторРазделов];
		БилетСсылка 		= Неопределено;
		
		БилетСсылка			= ПолучитьСлучайныйКодБилетаУникальныйВГруппе(СправочникГруппа, мНаборБилетов, ИмяСправочникаЭкзамен);
		БилетЕщеНеПроходил	= ?(БезПоказанныхРанее, ЭтоУникальныйБилетЗаВсеВремяПроверить(БилетСсылка), Истина);
		
		Если БилетСсылка <> Неопределено И БилетСсылка <> Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка() Тогда
			мНаборБилетов.Добавить(БилетСсылка);
		КонецЕсли;

		ИтераторРазделов = ?(ИтераторРазделов >= мРазделСсылка.ВГраница(), 0,  ИтераторРазделов + 1);
		ИтераторБилетов = ИтераторБилетов + 1;
	КонецЦикла;
	
	Возврат мНаборБилетов;
	
КонецФункции
	
// Процедура - Вывести билет на форму
//
// Параметры:
//  ФормаСсылка	 - ФормаСсылка - ссылка на любую форму.
//  БилетСсылка	 - СправочникСсылка - элемент хранит данные билета.
//
Процедура ВывестиБилетНаФорму(ФормаСсылка, БилетСсылка) Экспорт

	

КонецПроцедуры

// Функция - Получить значение выбранного билета как структура
//
// Параметры:
//	*ЗначениеВыбранногоБилета - Строка - строка разделенная ";" где первый элемент это раздел (число), а второй билет (число)
// 
// Возвращаемое значение:
//  Ответ - Структура ИЗ
//	*Раздел - номер раздела
//	*Билет - номер билета
//
Функция ПолучитьЗначениеВыбранногоБилетаКакСтруктура(ЗначениеВыбранногоБилета) Экспорт
	
	мВыбор	= СтрРазделить(ЗначениеВыбранногоБилета,";");
	
	Ответ	= Новый Структура;
	Ответ.Вставить("Раздел");
	Ответ.Вставить("Билет");
	
	Ответ.Раздел 	= мВыбор[0];
	Ответ.Билет		= мВыбор[1];
	
	Возврат Ответ;
	
КонецФункции // ПолучитьЗначениеВыбранногоБилетаКакСтруктура()


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПолучитьРазделы()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	Билеты.ЭтоГруппа
	|	И НЕ Билеты.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Код ВОЗР";
	
КонецФункции

Функция ТекстЗапросаПолучитьСлучайныйКодБилетаВГруппе()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка 	КАК Ссылка,
	|	Билеты.Код 		КАК Код
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	НЕ Билеты.ЭтоГруппа
	|	И  Билеты.Родитель 	В (&Родитель)
	|	И  НЕ Билеты.Ссылка В (&мНаборБилетов)
	|	И НЕ Билеты.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Билеты.Родитель.Код ВОЗР,
	|	Код ВОЗР";	
	
КонецФункции

Функция ТекстКоличествоБилетовВРазделе()
	
	Возврат "ВЫБРАТЬ
	|	Билеты.Ссылка 	КАК Ссылка,
	|	Билеты.Код 		КАК Код
	|ИЗ
	|	Справочник.&ИмяСправочникаЭкзамен КАК Билеты
	|ГДЕ
	|	Билеты.Родитель = &Родитель
	|	И НЕ Билеты.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	Билеты.Родитель.Код ВОЗР,
	|	Код ВОЗР";	
	
КонецФункции

Функция КоличествоБилетовВРазделе(ИмяСправочникаЭкзамен, РодительБилетов)
	
	ТекстЗапроса		= ТекстКоличествоБилетовВРазделе();
	ТекстЗапросаБилеты 	= СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаБилеты;
	
	Запрос.УстановитьПараметр("Родитель", 				РодительБилетов);
	Запрос.УстановитьПараметр("ИмяСправочникаЭкзамен", 	ИмяСправочникаЭкзамен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать().Количество();	
	
КонецФункции

// Функция - Получить случайный код билета уникальный в группе
//
// Параметры:
//  СправочникГруппа		 - СправочникСсылка	 - ЭтоГруппа справочника где хранятся билеты
//  мНаборБилетов			 - Массив Из СправочникСсылка - выбранные билеты на текущий момент
//  ИмяСправочникаЭкзамен	 - Строка - Имя справочника где хранятся билеты
// 
// Возвращаемое значение:
//  БилетСсылка - Массив Из СправочникСсылка
//
Функция ПолучитьСлучайныйКодБилетаУникальныйВГруппе(СправочникГруппа, мНаборБилетов, ИмяСправочникаЭкзамен)

	БилетСсылка 		= Справочники[ИмяСправочникаЭкзамен].ПустаяСсылка();
	ТекстЗапроса		= ТекстЗапросаПолучитьСлучайныйКодБилетаВГруппе();
	ТекстЗапросаБилеты 	= СтрЗаменить(ТекстЗапроса, "&ИмяСправочникаЭкзамен", ИмяСправочникаЭкзамен);
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= ТекстЗапросаБилеты;
	
	Запрос.УстановитьПараметр("Родитель", 		СправочникГруппа);
	Запрос.УстановитьПараметр("мНаборБилетов", 	мНаборБилетов);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка 			= РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИтерацияА				= 1;
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	СлучайныйБилетВыборки 	= ГенераторСлучайныхЧисел.СлучайноеЧисло(1, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
	
		Если СлучайныйБилетВыборки = ИтерацияА Тогда
			БилетСсылка = Выборка.Ссылка;
		КонецЕсли;
		
		ИтерацияА = ИтерацияА + 1;
		
	КонецЦикла;
	
	Возврат БилетСсылка;
	
КонецФункции

// Функция - Это уникальный билет за все время проверить
//
// Параметры:
//  БилетСсылка	 - СправочникСсылка	 - ссылка на справочник где хранятся билеты
// 
// Возвращаемое значение:
//  БилетНайден - Булево
//
Функция ЭтоУникальныйБилетЗаВсеВремяПроверить(БилетСсылка)

	Если БилетСсылка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БилетНайден = Ложь;
	ОтборБилет	= Новый Структура;
	
	ОтборБилет.Вставить("Билет", БилетСсылка);
	
	ВыборкаБилет = РегистрыСведений.БилетыПоказанныеРанее.Выбрать(,,ОтборБилет);
	
	Пока ВыборкаБилет.Следующий() Цикл
	
		Если ВыборкаБилет.Билет = БилетСсылка Тогда
			БилетНайден = Истина;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат БилетНайден;
	
КонецФункции

#Область РаботаСЭкзаменационнойФормой

// Процедура - Наполнить таблицу билетами
//
// Параметры:
//  ЭкзаменационнаяФорма - Форма - Обязательно содержит на форме
//									ТЗ "мБилеты" с реквизитом "Ссылка"
//									(составной тип СправочникСсылка, справочники билетов)
//  НаборБилетовЭкзамена - Массив ИЗ СправочникСсылка - составной тип СправочникСсылка, справочники билетов
//
&НаСервере
Процедура НаполнитьТаблицуБилетами(ЭкзаменационнаяФорма, НаборБилетовЭкзамена)

	Для каждого Билет Из НаборБилетовЭкзамена Цикл
		ЭкзаменационнаяФорма.мБилеты.Очистить();
		нСтрока = ЭкзаменационнаяФорма.мБилеты.Добавить();
		нСтрока.Ссылка = Билет;
	КонецЦикла;

КонецПроцедуры

// Процедура - Наполнить панель счетчик билетов
//
//	ВНИМАНИЕ: У формы обязанна быть группа "ПанельУправленияСчетчикБилетов"!
//	иначе необходимо переписать код:
//	ГруппаСчетчикБилетов = ЭтаФорма.Элементы.ПанельУправленияСчетчикБилетов;
//	на:
//	ГруппаСчетчикБилетов = ДФИнтерфейса.СоздатьОбычнуюГруппуБезОтображения(ЭтаФорма, "ГруппаПанельСчетчикБилетов", ЭтаФорма, 3);
//	(сейчас используется готовая группа для того что бы можно было разместить элементы формы в нужном порядке)
//
// Параметры:
//  ЭкзаменационнаяФорма - Форма - Обязательно содержит на форме
//									ТЗ "мБилеты" с реквизитом "Ссылка"
//									(составной тип СправочникСсылка, справочники билетов)
//  НаборБилетовЭкзамена - Массив ИЗ СправочникСсылка - составной тип СправочникСсылка, справочники билетов
//
//	ВНИМАНИЕ: На форме обязательно должен быть создан элемент (типа ГруппаБезОтображения) "ПанельСчетчикБилетов"
//
//	На форму будет добавлен элемент содержащий список значений:
//	*Значение - Строка - Раздел ; Билет (разделитель ";")
//	*Представление - Строка - Номер вопроса (счетчик)
&НаСервере
Процедура НаполнитьПанельСчетчикБилетов(ЭтаФорма, НаборБилетовЭкзамена)
	
	структураРеквизитов = Новый Структура;	
	структураРеквизитов.Вставить("СчетчикБилетов", ДФИнтерфейса.ОписаниеТипаСтрока());	
	ДФИнтерфейса.СоздатьРеквизиты(структураРеквизитов, ЭтаФорма);
	
	ГруппаСчетчикБилетов = ЭтаФорма.Элементы.ПанельУправленияСчетчикБилетов; // ДФИнтерфейса.СоздатьОбычнуюГруппуБезОтображения(ЭтаФорма, "ГруппаПанельСчетчикБилетов", ЭтаФорма, 3);
		
	СтруктураСвойства = Новый Структура;
	СтруктураСвойства.Вставить("РастягиватьПоГоризонтали", 			ИСТИНА);
	СтруктураСвойства.Вставить("Вид", 								ВидПоляФормы.ПолеПереключателя);
	СтруктураСвойства.Вставить("ВидПереключателя", 					ПредопределенноеЗначение("ВидПереключателя.Тумблер"));
	СтруктураСвойства.Вставить("ГоризонтальноеПоложениеВГруппе", 	ГоризонтальноеПоложениеЭлемента.Центр);
	СтруктураСвойства.Вставить("ПоложениеЗаголовка", 				ПоложениеЗаголовкаЭлементаФормы.Нет);
	
	ПолеСчетчикБилетов = ДФИнтерфейса.СоздатьПоле(ЭтаФорма, "СчетчикБилетов", ГруппаСчетчикБилетов, 1, "СчетчикБилетов", СтруктураСвойства);	

	//Для реализации динамической панели управления "СчетчикБилетов"
	//мЭкраны = ПолучитьИнформациюЭкрановКлиента();
	//ВысотаЭкрана = Формат(мЭкраны[0].Высота, "ЧГ=");
	//ШиринаЭкрана = Формат(мЭкраны[0].Ширина, "ЧГ=");

	//Сообщить(СтрШаблон("ЭтаФорма.Ширина: %1x%2", ШиринаЭкрана, ВысотаЭкрана));
	
	Счетчик = 1;
	Для каждого Билет Из НаборБилетовЭкзамена Цикл		
		ПолеСчетчикБилетов.СписокВыбора.Добавить( СтрШаблон("%1;%2", Счетчик, Билет.Код), Счетчик);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	знчИнициализации 		= ?(НаборБилетовЭкзамена.Количество() > 0, СтрШаблон("%1;%2", 1, НаборБилетовЭкзамена[0].Код), 0);
	ЭтаФорма.СчетчикБилетов = знчИнициализации;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти